'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 21 June 2018 at 4:16:01.994712 pm'!TestCase subclass: #CustomerImporterTest	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporterTest methodsFor: 'importing' stamp: 'sabrinacastro 6/21/2018 15:21'!test01Customers	| importedCustomers inputStream |	inputStream := FileStream fileNamed: 'input.txt'.	self importCustomer: inputStream.	importedCustomers := session selectAllOfType: Customer.	self assert: importedCustomers size equals: 2.	self		assertExistsCustomerIn: importedCustomers		withFirstName: 'Pepe'		andLastName: 'Sanchez'		andIdentificationType: 'D'		andIdentificationNumber: '22333444'.	self		assertExistsCustomerIn: importedCustomers		withFirstName: 'Juan'		andLastName: 'Perez'		andIdentificationType: 'C'		andIdentificationNumber: '23-25666777-9'! !!CustomerImporterTest methodsFor: 'importing' stamp: 'sabrinacastro 6/21/2018 16:12'!test02Address	| importedCustomers inputStream |	inputStream := FileStream fileNamed: 'input.txt'.	self importCustomer: inputStream.	importedCustomers := session selectAllOfType: Address.	self assert: importedCustomers size equals: 3.	self		assertExistsAddressIn: importedCustomers		withStreetName: 'San Martin'		andStreetNumber: 3322		andTown: 'Olivos'		andZipCode: 1636		andProvince:'BsAs'. 	self		assertExistsAddressIn: importedCustomers		withStreetName: 'Maipu'		andStreetNumber: 888		andTown: 'Florida'		andZipCode: 1122		andProvince:'Buenos Aires'. 	self		assertExistsAddressIn: importedCustomers		withStreetName: 'Alem'		andStreetNumber: 1122		andTown: 'CABA'		andZipCode: 1001		andProvince:'CABA'. ! !!CustomerImporterTest methodsFor: 'importing' stamp: 'sabrinacastro 6/21/2018 15:34'!assertExistsCustomerIn: customers withFirstName: firstName andLastName: lastName andIdentificationType: identificationType andIdentificationNumber: identificationNumber	self		assert:			(customers				anySatisfy: [ :aCustomer 					| aCustomer firstName = firstName and: 					(							(aCustomer lastName = lastName) and:						(								(aCustomer identificationType  = identificationType) and: 							(aCustomer identificationNumber  = identificationNumber)						)					)]			)! !!CustomerImporterTest methodsFor: 'importing' stamp: 'MatiasGonzalez 6/18/2018 19:56'!tearDown	session commit.	session close! !!CustomerImporterTest methodsFor: 'importing' stamp: 'sabrinacastro 6/21/2018 16:14'!assertExistsAddressIn: address withStreetName: streetName andStreetNumber: streetNumber andTown: town andZipCode: zipCode andProvince: province	self		assert:			(address				anySatisfy: [ :anAddress 					| anAddress streetName  = streetName and: 					(						(anAddress streetNumber  = streetNumber) and:						(								(anAddress town  = town) and:							(									(anAddress zipCode = zipCode) and: 								(anAddress province  = province)							)						)					)]			)! !!CustomerImporterTest methodsFor: 'importing' stamp: 'MatiasGonzalez 6/18/2018 19:56'!setUp	session := DataBaseSession		for:			(Array				with:					(ClassMapping						withDefaultTableNameFor: Address						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))				with:					(ClassMapping						withDefaultTableNameFor: Customer						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #firstName)								with: (EmbededMapping withDefaultFieldNameFor: #lastName)								with: (EmbededMapping withDefaultFieldNameFor: #identificationType)								with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)								with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).	session open.	session beginTransaction! !!CustomerImporterTest methodsFor: 'importing' stamp: 'sabrinacastro 6/21/2018 16:13'!importCustomer: inputStream	"	self importCustomers	"	| newCustomer line |	line := inputStream nextLine.	[ line notNil ]		whileTrue: [ (line beginsWith: 'C')				ifTrue: [ | customerData |					customerData := line substrings: {$,}.					newCustomer := Customer new.					newCustomer firstName: customerData second.					newCustomer lastName: customerData third.					newCustomer identificationType: customerData fourth.					newCustomer identificationNumber: customerData fifth.					session persist: newCustomer ].			(line beginsWith: 'A')				ifTrue: [ | addressData newAddress |					addressData := line substrings: {$,}.					newAddress := Address new.					newAddress streetName: addressData second.					newAddress streetNumber: addressData third asInteger.					newAddress town: addressData fourth.					newAddress zipCode: addressData fifth asInteger.					newAddress province: addressData sixth.					newCustomer addAddress: newAddress ].			line := inputStream nextLine ].	inputStream close! !